const pool = require('./config/database');

async function cleanAndResetDatabase() {
    console.log('üßπ D√©but du nettoyage de la base de donn√©es...');
    
    try {
        // D√©sactiver les contraintes de cl√©s √©trang√®res temporairement
        await pool.query('SET session_replication_role = replica;');
        
        console.log('üìã Suppression de toutes les donn√©es...');
        
        // Supprimer toutes les donn√©es dans l'ordre inverse des d√©pendances
        await pool.query('DELETE FROM conversations');
        console.log('‚úÖ Conversations supprim√©es');
        
        await pool.query('DELETE FROM bots');
        console.log('‚úÖ Bots supprim√©s');
        
        await pool.query('DELETE FROM products');
        console.log('‚úÖ Produits supprim√©s');
        
        await pool.query('DELETE FROM merchants');
        console.log('‚úÖ Marchands supprim√©s');
        
        await pool.query('DELETE FROM users');
        console.log('‚úÖ Utilisateurs supprim√©s');
        
        // R√©activer les contraintes de cl√©s √©trang√®res
        await pool.query('SET session_replication_role = DEFAULT;');
        
        // Note: Pas besoin de r√©initialiser les s√©quences car on utilise des UUID
        console.log('‚úÖ Tables vid√©es (UUID utilis√©s, pas de s√©quences √† r√©initialiser)');
        
        // Cr√©er des donn√©es de test
        console.log('üå± Cr√©ation de donn√©es de test...');
        
        // Cr√©er un utilisateur marchand de test
        const merchantUser = await pool.query(`
            INSERT INTO users (email, password_hash, role, created_at) 
            VALUES ($1, $2, $3, NOW()) 
            RETURNING id
        `, ['marchand@test.com', '$2b$10$example.hash.for.password123', 'marchand']);
        
        const merchantUserId = merchantUser.rows[0].id;
        
        // Cr√©er un profil marchand
        const merchant = await pool.query(`
            INSERT INTO merchants (user_id, shop_name, shop_description) 
            VALUES ($1, $2, $3) 
            RETURNING user_id as id
        `, [merchantUserId, 'Boutique Tech Abidjan', 'Sp√©cialiste en √©lectronique et gadgets high-tech √† Abidjan']);
        
        const merchantId = merchant.rows[0].id;
        
        // Cr√©er des produits de test avec prix en CFA
        const products = [
            ['iPhone 15 Pro', 'Smartphone Apple derni√®re g√©n√©ration avec puce A17 Pro', 850000],
            ['Samsung Galaxy S24', 'Smartphone Samsung avec IA int√©gr√©e et appareil photo 200MP', 720000],
            ['MacBook Air M3', 'Ordinateur portable Apple avec puce M3, 13 pouces', 1200000],
            ['AirPods Pro 2', '√âcouteurs sans fil Apple avec r√©duction de bruit active', 180000],
            ['iPad Air', 'Tablette Apple 10.9 pouces avec puce M1', 450000],
            ['Apple Watch Series 9', 'Montre connect√©e Apple avec GPS et cellular', 320000],
            ['Sony WH-1000XM5', 'Casque audio sans fil avec r√©duction de bruit', 250000],
            ['Nintendo Switch OLED', 'Console de jeu portable avec √©cran OLED', 280000]
        ];
        
        for (const [name, description, price] of products) {
            await pool.query(`
                INSERT INTO products (merchant_id, name, description, price, created_at) 
                VALUES ($1, $2, $3, $4, NOW())
            `, [merchantId, name, description, price]);
        }
        
        console.log('‚úÖ Produits de test cr√©√©s');
        
        // Cr√©er un bot de test
        await pool.query(`
            INSERT INTO bots (merchant_id, name, personality_prompt, is_published) 
            VALUES ($1, $2, $3, $4)
        `, [
            merchantId, 
            'TechBot Abidjan', 
            'Je suis un expert en technologie bas√© √† Abidjan. Je connais parfaitement tous nos produits Apple, Samsung et autres marques. Je peux vous conseiller selon vos besoins et votre budget en CFA.',
            true
        ]);
        
        console.log('‚úÖ Bot de test cr√©√©');
        
        // Cr√©er un utilisateur client de test
        await pool.query(`
            INSERT INTO users (email, password_hash, role, created_at) 
            VALUES ($1, $2, $3, NOW())
        `, ['client@test.com', '$2b$10$example.hash.for.password123', 'client']);
        
        console.log('‚úÖ Client de test cr√©√©');
        
        console.log('\nüéâ Base de donn√©es nettoy√©e et r√©initialis√©e avec succ√®s !');
        console.log('\nüìã Donn√©es de test cr√©√©es :');
        console.log('üë§ Marchand : marchand@test.com (mot de passe : password123)');
        console.log('üë§ Client : client@test.com (mot de passe : password123)');
        console.log('üè™ Boutique : Boutique Tech Abidjan');
        console.log('üì¶ 8 produits avec prix en CFA');
        console.log('ü§ñ 1 bot publi√© : TechBot Abidjan');
        console.log('\nüí° Vous pouvez maintenant tester votre application !');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage de la base de donn√©es:', error);
        throw error;
    } finally {
        await pool.end();
    }
}

// Fonction pour confirmer l'action
function confirmAction() {
    return new Promise((resolve) => {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        rl.question('‚ö†Ô∏è  ATTENTION : Cette action va supprimer TOUTES les donn√©es de la base. Continuer ? (oui/non): ', (answer) => {
            rl.close();
            resolve(answer.toLowerCase() === 'oui' || answer.toLowerCase() === 'o' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y');
        });
    });
}

// Ex√©cuter le script
async function main() {
    console.log('üóÑÔ∏è  Script de nettoyage et r√©initialisation de la base de donn√©es');
    console.log('================================================');
    
    const confirmed = await confirmAction();
    
    if (confirmed) {
        await cleanAndResetDatabase();
    } else {
        console.log('‚ùå Op√©ration annul√©e par l\'utilisateur');
        process.exit(0);
    }
}

// Ex√©cuter seulement si le script est appel√© directement
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erreur fatale:', error);
        process.exit(1);
    });
}

module.exports = { cleanAndResetDatabase };