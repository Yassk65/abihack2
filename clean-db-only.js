const pool = require('./config/database');

async function cleanDatabaseOnly() {
    console.log('üßπ Nettoyage complet de la base de donn√©es...');
    
    try {
        // D√©sactiver les contraintes de cl√©s √©trang√®res temporairement
        await pool.query('SET session_replication_role = replica;');
        
        console.log('üìã Suppression de toutes les donn√©es...');
        
        // Supprimer toutes les donn√©es dans l'ordre inverse des d√©pendances
        await pool.query('DELETE FROM conversations');
        console.log('‚úÖ Conversations supprim√©es');
        
        await pool.query('DELETE FROM bots');
        console.log('‚úÖ Bots supprim√©s');
        
        await pool.query('DELETE FROM products');
        console.log('‚úÖ Produits supprim√©s');
        
        await pool.query('DELETE FROM merchants');
        console.log('‚úÖ Marchands supprim√©s');
        
        await pool.query('DELETE FROM users');
        console.log('‚úÖ Utilisateurs supprim√©s');
        
        // R√©activer les contraintes de cl√©s √©trang√®res
        await pool.query('SET session_replication_role = DEFAULT;');
        
        // Note: Pas besoin de r√©initialiser les s√©quences car on utilise des UUID
        console.log('‚úÖ Tables vid√©es (UUID utilis√©s, pas de s√©quences √† r√©initialiser)');
        console.log('\nüéâ Base de donn√©es compl√®tement nettoy√©e !');
        console.log('üí° Vous pouvez maintenant cr√©er de nouvelles donn√©es de test.');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du nettoyage:', error);
        throw error;
    } finally {
        await pool.end();
    }
}

// Fonction pour confirmer l'action
function confirmAction() {
    return new Promise((resolve) => {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        rl.question('‚ö†Ô∏è  ATTENTION : Cette action va supprimer TOUTES les donn√©es. Continuer ? (oui/non): ', (answer) => {
            rl.close();
            resolve(answer.toLowerCase() === 'oui' || answer.toLowerCase() === 'o' || answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y');
        });
    });
}

// Ex√©cuter le script
async function main() {
    console.log('üóÑÔ∏è  Script de nettoyage de la base de donn√©es');
    console.log('==========================================');
    
    const confirmed = await confirmAction();
    
    if (confirmed) {
        await cleanDatabaseOnly();
    } else {
        console.log('‚ùå Op√©ration annul√©e par l\'utilisateur');
        process.exit(0);
    }
}

// Ex√©cuter seulement si le script est appel√© directement
if (require.main === module) {
    main().catch(error => {
        console.error('‚ùå Erreur fatale:', error);
        process.exit(1);
    });
}

module.exports = { cleanDatabaseOnly };