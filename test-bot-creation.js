const pool = require('./config/database');
const Bot = require('./models/Bot');
const Product = require('./models/Product');

async function testBotCreation() {
    console.log('üß™ Test de cr√©ation de bot...');
    
    try {
        // Cr√©er un utilisateur marchand de test
        console.log('üë§ Cr√©ation utilisateur marchand...');
        const userResult = await pool.query(`
            INSERT INTO users (email, password_hash, role, created_at) 
            VALUES ($1, $2, $3, NOW()) 
            RETURNING id
        `, ['test-bot@example.com', '$2b$10$test.hash', 'marchand']);
        
        const userId = userResult.rows[0].id;
        console.log('‚úÖ Utilisateur cr√©√©:', userId);
        
        // Cr√©er un profil marchand
        console.log('üè™ Cr√©ation profil marchand...');
        await pool.query(`
            INSERT INTO merchants (user_id, shop_name, shop_description) 
            VALUES ($1, $2, $3)
        `, [userId, 'Test Shop', 'Boutique de test']);
        console.log('‚úÖ Marchand cr√©√©');
        
        // Cr√©er un produit
        console.log('üì¶ Cr√©ation produit...');
        const product = await Product.create(userId, 'Produit Test', 'Description test', 10000, {});
        console.log('‚úÖ Produit cr√©√©:', product.id);
        
        // V√©rifier que le marchand a des produits
        console.log('üîç V√©rification produits...');
        const products = await Product.findByMerchant(userId);
        console.log('üì¶ Produits trouv√©s:', products.length);
        
        if (products.length === 0) {
            throw new Error('Aucun produit trouv√© pour le marchand');
        }
        
        // Cr√©er un bot
        console.log('ü§ñ Cr√©ation bot...');
        const bot = await Bot.create(userId, 'Bot Test', 'Je suis un bot de test');
        console.log('‚úÖ Bot cr√©√©:', bot);
        
        // V√©rifier que le bot existe
        console.log('üîç V√©rification bot...');
        const foundBot = await Bot.findByMerchant(userId);
        console.log('ü§ñ Bot trouv√©:', foundBot);
        
        if (!foundBot) {
            throw new Error('Bot non trouv√© apr√®s cr√©ation');
        }
        
        console.log('\nüéâ Test de cr√©ation de bot r√©ussi !');
        console.log('‚úÖ Utilisateur, marchand, produit et bot cr√©√©s avec succ√®s');
        
        // Nettoyer les donn√©es de test
        console.log('\nüßπ Nettoyage des donn√©es de test...');
        await pool.query('DELETE FROM bots WHERE merchant_id = $1', [userId]);
        await pool.query('DELETE FROM products WHERE merchant_id = $1', [userId]);
        await pool.query('DELETE FROM merchants WHERE user_id = $1', [userId]);
        await pool.query('DELETE FROM users WHERE id = $1', [userId]);
        console.log('‚úÖ Donn√©es de test supprim√©es');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
        
        // Essayer de nettoyer en cas d'erreur
        try {
            await pool.query('DELETE FROM users WHERE email = $1', ['test-bot@example.com']);
        } catch (cleanupError) {
            console.error('‚ùå Erreur nettoyage:', cleanupError);
        }
        
        throw error;
    } finally {
        await pool.end();
    }
}

// Ex√©cuter le test
if (require.main === module) {
    testBotCreation().catch(error => {
        console.error('‚ùå Test √©chou√©:', error);
        process.exit(1);
    });
}

module.exports = { testBotCreation };